#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# shellcheck shell=bash disable=SC1091,SC2039,SC2166
#
#  rmake
#  Created: 2019/12/13 - 00:00
#  Altered: 2024/10/03 - 00:00
#  Updated: qui 16 jan 2025 23:11:08 -04
#
#  Copyright (c) 2019-2025, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##############################################################################
# ./rmake $(<PKGBUILD)

export TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAIN=rmake
export TERM=${TERM:-xterm}
export TERM=${TERM:-xterm-256color}

#debug
export PS4='${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset} '
#set -x
#set -e

#system
readonly APP="${0##*/}"
readonly VERSION='0.19.01-20250119'
readonly APPDESC='Wrapper para o void xbps-src'
readonly -a DEPENDENCIES=(
	'tput'
	'gettext'
	'qemu-system-x86_64'
	'spice-vdagent'
	'remote-viewer'
	'python3'
)
readonly -A PACKAGEDEP=(
	[tput]='ncurses'
	[gettext]='gettext'
	[qemu - system - x86_64]='qemu-full'
	[spice - vdagent]='spice-vdagent'
	[remote - viewer]='virt-viewer'
	[python3]='python'
)

./xbps-src binary-bootstrap
echo XBPS_ALLOW_RESTRICTED=yes >>etc/conf

repomain=$PWD/hostdir/binpkgs
repo=$PWD/pkgs
processed=false

sh_setvarcolors() {
	if command -v "tput" &>/dev/null; then
		tput sgr0 # reset colors
		bold=$(tput bold)
		reset=$(tput sgr0)
		white="${bold}$(tput setaf 7)"
		black="${bold}$(tput setaf 0)"
		red=$(tput bold)$(tput setaf 196)
		green=$(tput setaf 2)
		yellow=$(tput bold)$(tput setaf 3)
		blue=$(tput setaf 4)
		pink=$(tput setaf 5)
		cyan=$(tput setaf 6)
		orange=$(tput setaf 3)
		purple=$(tput setaf 125)
		violet=$(tput setaf 61)
	else
		red="\033[01;31m"
		green="\033[01;32m"
		yellow="\033[01;33m"
		blue="\033[01;34m"
		pink="\033[01;35m"
		cyan="\033[01;36m"
		reset="\033[0m"
	fi
	COL_NC='\e[0m' # No Color
	COL_LIGHT_GREEN='\e[1;32m'
	COL_LIGHT_RED='\e[1;31m'
	TICK="${white}[${COL_LIGHT_GREEN}✓${COL_NC}${white}]"
	CROSS="${white}[${COL_LIGHT_RED}✗${COL_NC}${white}]"
	INFO="[i]"
	# shellcheck disable=SC2034
	DONE="${COL_LIGHT_GREEN} done!${COL_NC}"
	OVER="\\r\\033[K"
	DOTPREFIX="  ${black}::${reset} "
}

sh_unsetvarcolors() {
	unset bold reset cyan red blue white black
	unset green yellow orange pink cyan purple violet
}

die() {
	local msg=$1
	shift
	printf "  %b %s\\n" "${CROSS}" "${bold}${red}${msg}"
	exit 1
}

log_err() {
	printf "  %b %s\\n" "${CROSS}" "${*}"
}

log_msg() {
	local retval="${PIPESTATUS[0]}"

	if [[ $retval -eq 0 ]]; then
		printf "  %b %s\\n" "${TICK}" "${*}"
	else
		printf "  %b %s\\n" "${CROSS}" "${*}"
	fi
}

msg_raw() {
	local msg="$1"
	# Remove tags HTML, se existirem
	#msg="$(sed 's/<[^>]*>//g' <<< "$msg")"

	# Verifica se existe ':' na mensagem
	if [[ "$msg" == *:* ]]; then
		# Divide a string antes e depois do primeiro ':'
		local before_colon="${msg%%:*}:"
		local after_colon="${msg#*: }"
		# Aplica as cores
		msg="${cyan}${before_colon} ${red}${after_colon}${reset}"
	else
		# Se não houver ':', aplica apenas a cor padrão
		msg="${yellow}${cyan}${msg}${reset}"
	fi
	echo -e "$msg"
}
export -f msg_raw

msg() {
	local msg="$1"
	msg="$(sed 's/<[^>]*>//g' <<<"$msg")" # Remove as tags HTML
	echo -e "BP=>${cyan}running: ${yellow}${msg}${reset}"
}
export -f msg

msg_ok() {
	local msg="$1"
	msg="$(sed 's/<[^>]*>//g' <<<"$msg")" # Remove as tags HTML
	echo -e "BP=>${cyan}feito: ${green}${msg}${reset}"
}
export -f msg_ok

msg_run() {
	local msg="$1"
	echo -e "BP=>${cyan}running: ${yellow}${msg}${reset}"
	eval "$msg"
}
export -f msg_run

msg_info() {
	local msg="$1"
	local caller_function="${FUNCNAME[1]}" # Nome da função que chamou a função atual
	local caller_line="${BASH_LINENO[1]}"  # Número da linha que chamou a função atual
	#echo -e "${caller_function}=>${yellow}info   : ${cyan}${msg}${reset}"
	echo -e "  =>${yellow}info   : ${cyan}${msg}${reset}"
}
export -f msg_info

msg_warning() {
	local msg="$1"
	local caller_function="${FUNCNAME[1]}" # Nome da função que chamou a função atual
	local caller_line="${BASH_LINENO[1]}"  # Número da linha que chamou a função atual
	msg="$(sed 's/<[^>]*>//g' <<<"$msg")"  # Remove as tags HTML
	echo -e "${caller_function}=>${red}warning: ${orange}${msg}${reset}"
}
export -f msg_warning

msg_warn() {
	local msg="$1"
	local caller_function="${FUNCNAME[1]}" # Nome da função que chamou a função atual
	local caller_line="${BASH_LINENO[1]}"  # Número da linha que chamou a função atual
	msg="$(sed 's/<[^>]*>//g' <<<"$msg")"  # Remove as tags HTML
	echo -e "${caller_function}=>${red}warning: ${orange}${msg}${reset}"
}
export -f msg_warn

replicate() {
	local char=${1:-'#'}
	local nsize=${2:-$(tput cols)}
	local line
	printf -v line "%*s" "$nsize" && echo -e "${blue}${line// /$char}${reset}"
}
export -f replicate

send_telegram_message() {
	local message="$1"
	local parse_mode="$2"

	# Define parse_mode como "MarkdownV2" se não for especificado
	[[ -z $parse_mode ]] && parse_mode="HTML"

	# Remove as tags HTML e exibe o resultado no terminal
	echo -e "${red}$(sed 's/<[^>]*>//g' <<<"$message")${reset}"
	# Envia a mensagem original com HTML para o Telegram
	curl -s -X POST "https://api.telegram.org/bot${inputs_telegram_token}/sendMessage" \
		-d chat_id="${inputs_telegram_chat_id}" \
		-d text="$message" \
		-d parse_mode="$parse_mode"
}
export -f send_telegram_message

readconf() {
	local msg="$1"
	local color="${2:-${red}}"

	echo -n -e "$color"
	if [[ $LC_DEFAULT -eq 0 ]]; then
		read -r -p "$msg [S/n]"
	else
		read -r -p "$msg [Y/n]"
	fi
	echo -n -e "$reset"
	case "${REPLY^}" in
	[SY]) return 0 ;;
	"") return 0 ;;
	*) return 1 ;;
	esac
}

sh_checkDependencies() {
	local aBlock_files=()
	local d
	local errorFound=false
	declare -a missing

	for d in "${DEPENDENCIES[@]}"; do
		if ! command -v "$d" &>/dev/null; then
			log_err "Check: ${red}ERROR${reset}: $(gettext "Não foi possível encontrar o comando") ${cyan}'$d'${reset} -> $(gettext "instalar pacote") ${cyan}"${PACKAGEDEP[$d]}"${reset}"
			missing+=("$d")
			errorFound=true
		else
			log_msg "Check: ${cyan}$d"
		fi
	done

	aBlock_files+=('/usr/share/edk2/x64/OVMF_VARS.4m.fd')
	aBlock_files+=('/archlive/qemu/hda.img')
	aBlock_files+=('/archlive/qemu/hdb.img')
	aBlock_files+=('/archlive/qemu/hdc.img')
	aBlock_files+=('/archlive/qemu/hdd.img')
	for d in "${aBlock_files[@]}"; do
		if [[ ! -e "$d" ]]; then
			log_err "Check: ${red}ERROR${reset}: $(gettext "Não foi possível encontrar o arquivo") ${cyan}'$d'${reset}"
			missing+=("$d")
			errorFound=true
		fi
	done

	if $errorFound; then
		replicate '='
		echo "${yellow}             $(gettext "IMPOSSÍVEL CONTINUAR")"
		echo "${black}$(gettext "Este script precisa dos comandos listados acima")"
		echo "${black}$(gettext "Instale-os e/ou verifique se eles estão em seu") ${red}\$PATH${reset}"
		replicate '='
		#die $(gettext "Abortando...")
		if readconf "Deseja instalar os pacotes e criar os arquivos necessários ?"; then
			sh_setup
		fi
	fi
}

sh_version() {
	cat <<-EOF
		        ${BOLD}${CYAN}${0##*/} v${VERSION}${RESET}
		        ${APPDESC}
		        ${BOLD}${black}Copyright (C) 2024-2024 ${reset}ChiliLinux Team${black}

		        Este é um software livre: você é livre para alterá-lo e redistribuí-lo.
		        O $APP é disponibilizado para você sob a ${yellow}Licença MIT${black}, e
		        inclui software de código aberto sob uma variedade de outras licenças.
		        Você pode ler instruções sobre como baixar e criar para você mesmo
		        o código fonte específico usado para criar esta cópia.
		        ${red}Este programa vem com absolutamente NENHUMA garantia.
		        ${reset}
	EOF
	exit 0
}

function sh_usage {
	cat <<EOF
$(gettext "Uso"):
  ${orange}$APP${reset} [$(gettext "Opções")

$(gettext "Opções"):
  -p|--pkg      ${orange}<pkg> ${cyan}#construir pacote pkg ${reset}
  -t|--template ${orange}<pkg> ${cyan}#baixar template do pacote <pkg> ${reset}
  -n|--nocolor        ${cyan}#remover cores da saída - default: color ${reset}
  -s|--sign           ${cyan}#assinar pacotes ${reset}
  -b|--bootstrap      ${cyan}#instalar bootstrap ${reset}
  -V|--version        ${cyan}#versão do aplicativo ${reset}
  -h|--help           ${cyan}#imprime esta ajuda ${reset}

$(gettext "Exemplo"):
  $ ${orange}$APP${reset} -p nano
  $ ${orange}$APP${reset} -p nano chili-util
EOF
	exit 0
}

update_version_revision() {
	local file="$1"

	sed -i "s/^version=.*/version=\$(date +%Y%m%d)/" "$file"
	sed -i "s/^revision=.*/revision=\$(date +%H%M)/" "$file"
}

build_package() {
	packages="$@"

	for i in ${packages[@]}; do
		echo "Construindo: $i"
		if [[ -e "$PWD/srcpkgs/$i/template" ]]; then
			update_version_revision "$PWD/srcpkgs/$i/template"
#			if ./xbps-src -j$(nproc) pkg $i &>/dev/null; then
			if ./xbps-src -j$(nproc) pkg $i; then
				mv -vf $repomain/$i*.xbps $repo/ &>/dev/null
				mv -vf $repomain/main/$i*.xbps $repo/ &>/dev/null
				processed=true
				:
			fi
		fi
	done
	if $processed; then
		./sign.sh
	fi
}

get_template_from_repo() {
	local pkg="$1"
	local dest="$PWD/srcpkgs/$pkg"

	mkdir -p $dest
	pushd $dest
	wget -q https://raw.githubusercontent.com/chililinux/$pkg/main/template
	popd
	echo $pkg >>PKGBUILD
}

sh_setvarcolors

OPTIONS=Vhnt:sp:
LONGOPTIONS=version,help,nocolor,template:,sign,pkg:
opts=($(getopt --options="$OPTIONS" --longoptions="$LONGOPTIONS" --name "$0" -- "$@"))
eval set -- "${opts[*]}"

while test ${#opts[*]} -gt 0; do
	case $1 in
	-V | --version) sh_version ;;
	-h | --help) sh_usage ;;
	-n | --nocolor)
		sh_unsetvarcolors
		;;
	-t | --template)
		get_template_from_repo "$2"
		shift
		;;
	-p | --pkg)
		if [[ -n $2 ]]; then
			pkg=$2
			build_package "$pkg"
			break
		else
			die "Argumento inválido para --pkg."
		fi
		shift
		;;
	-b | --bootstrap)
		./xbps-src binary-bootstrap
		;;
	-s | --sign)
		./sign.sh
		;;
	--)
		shift
		break
		;;
	:)
		die "-$OPTARG requer um argumento"
		;;
	*)
		die "operação não suportada: $1 (usar -h para ajuda)"
		;;
	esac
	shift
done
